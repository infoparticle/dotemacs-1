;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;    normal bindings     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; alphabets
(which-key-add-key-based-replacements
  ;; lower case
  "a" "append"
  "b" "prev word"
  "c" "change"
  "d" "delete"
  "e" "next word"
  "f" "find forward"
  "g" "global prefix"
  "h" "prev char"
  "i" "insert"
  "j" "next line"
  "k" "prev line"
  "l" "next char"
  "m" "major mode prefix"
  "n" "next item"
  "o" "open below"
  "p" "paste"
  "q" "start macro"
  "r" "fold"
  "s" "surround"
  "t" "tags"
  "u" "undo"
  "v" "select"
  "w" "window"
  "x" "delete char"
  "y" "yank"
  "z" "recenter"
  ;; uppercase
  "A" "append to line"
  "B" "default bib file"
  "C" "change rest"
  "D" "delete rest"
  "E" "edit occurrences"
  "F" "find backward"
  "G" "end of buffer"
  "H" "scroll left"
  "I" "insert at start"
  "J" "scroll down"
  "K" "scroll up"
  "L" "scroll right"
  "M" "move cursor"
  "N" "prev item"
  "O" "open above"
  "P" "paste rectangle"
  "Q" "end macro"
  "R" "overwrite"
  "S" "smart nav"
  "T" "tags find"
  "U" "redo"
  "V" "set mark"
  "W" "open dir"
  "X" "exchange point and mark"
  "Y" "yank rest"
  "Z" "fullscreen")

;; numbers and symbols
(which-key-add-key-based-replacements
  ;; numbers
  "1" "1"
  "2" "2"
  "3" "3"
  "4" "4"
  "5" "5"
  "6" "6"
  "7" "7"
  "8" "8"
  "9" "9"
  "0" "start of line"
  ;; symbols
  "~" "toggle case"
  "!" "shell command"
  "@" "macro call"
  "#" "wgrep save all"
  "$" "end of line"
  "%" "end of line"
  "^" "end of line"
  "&" "eshell prompt"
  "*" "search at point"
  "(" "start of sentence"
  ")" "end of sentence"
  "-" "switch config"
  "_" "last config"
  "{" "start of para"
  "}" "end of para"
  "[" "previous error"
  "]" "next error"
  "DEL" "previous buffer"
  "\\" "universal argument"
  "|" "zoom in"
  ";" "goto line"
  ":" "C-x"
  "'" "avy resume/next cursor"
  "\"" "avy pop/restrict cursor"
  "," "semantic jump"
  "<" "prev occurence"
  ">" "next occurence"
  "/" "search buffer"
  "?" "show hints"
  "+" "bookmark set"
  "." "repeat"
  "^" "macro query"
  "`" "nothing; tmux prefix"
  ;; arrow keys
  "<left>" "global back mark"
  "<down>" "local next mark"
  "<up>" "local prev mark"
  "<right>" "global forward mark")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;    operator bindings     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; select
(which-key-add-key-based-replacements
  "v r" "rectangle"
  "v c" "create space"
  "v d" "delete space"
  "v w" "jump frame"
  "v y" "copy to os clipboard"
  "v u" "projectile async shell command"
  "v n" "number lines"
  "v p" "open rectangle"
  "v m" "redraw display"
  "v v" "expand region"
  "v s" "sexp"
  "v z" "view customization"
  "v TAB" "indent buffer"
  "v i" "inside"
  "v a" "around"
  "v g" "global"
  "v i a" "all"
  "v a a" "all"
  "v i w" "word"
  "v a w" "word"
  "v i p" "para"
  "v a p" "para"
  "v i i" "indent level"
  "v a i" "indent tree"
  "v i s" "sentence"
  "v a s" "sentence"
  "v i l" "line"
  "v a l" "line"
  "v i y" "symbol"
  "v a y" "symbol"
  "v i c" "comment"
  "v a c" "comment"
  "v i f" "function"
  "v a f" "function"
  "v i q" "quote"
  "v a q" "quote"
  "v i b" "block/pairs"
  "v a b" "block/pairs"
  "v i o" "org code"
  "v a o" "org code"
  "v i u" "org subtree"
  "v a u" "org subtree"
  "v i e" "latex env"
  "v a e" "latex env"
  "v i r" "method call"
  "v a r" "method call"
  "v i d" "ruby block"
  "v a d" "ruby block"
  "v i g" "python string"
  "v a g" "python string"
  "v i m" "python block"
  "v a m" "python block"
  "v i n" "python statement"
  "v a n" "python block and dec"
  "v i h" "diff hunk"
  "v a h" "diff hunk"
  "v i x" "latex section"
  "v a x" "latex section"
  "v i $" "latex math"
  "v a $" "latex math"
  "v f" "to char"
  "v F" "to char back"
  "v t" "till char"
  "v T" "till char back"
  "v ;" "find on screen"
  "v g ;" "till line"
  "v h" "prev char"
  "v j" "next line"
  "v k" "prev line"
  "v l" "next char"
  "v 0" "till start of line"
  "v $" "till end of line"
  "v {" "till start of para"
  "v }" "till end of para"
  "v (" "till start of sentence"
  "v )" "till end of sentence"
  "v e" "end of word"
  "v b" "start of word"
  "v g g" "start of buffer"
  "v G" "end of buffer")

;; change
(which-key-add-key-based-replacements
  "c u" "change project"
  "c y" "cut to os clipboard"
  "c d" "directory"
  "c r" "rectangle"
  "c n" "scroll down other"
  "c p" "scroll up other"
  "c x" "doc fit"
  "c u" "switch project"
  "c v" "replace at cursor"
  "c c" "line/region"
  "c i" "inside"
  "c a" "around"
  "c g" "global"
  "c i a" "all"
  "c a a" "all"
  "c i w" "word"
  "c a w" "word"
  "c i p" "para"
  "c a p" "para"
  "c i i" "indent level"
  "c a i" "indent tree"
  "c i s" "sentence"
  "c a s" "sentence"
  "c i l" "line"
  "c a l" "line"
  "c i y" "symbol"
  "c a y" "symbol"
  "c i c" "comment"
  "c a c" "comment"
  "c i f" "function"
  "c a f" "function"
  "c i q" "quote"
  "c a q" "quote"
  "c i b" "block/pairs"
  "c a b" "block/pairs"
  "c i o" "org code"
  "c a o" "org code"
  "c i u" "org subtree"
  "c a u" "org subtree"
  "c i e" "latex env"
  "c a e" "latex env"
  "c i r" "method call"
  "c a r" "method call"
  "c i d" "ruby block"
  "c a d" "ruby block"
  "c i g" "python string"
  "c a g" "python string"
  "c i m" "python block"
  "c a m" "python block"
  "c i h" "diff hunk"
  "c a h" "diff hunk"
  "c i x" "latex section"
  "c a x" "latex section"
  "c i n" "python statement"
  "c a n" "python block and dec"
  "c i $" "latex math"
  "c a $" "latex math"
  "c f" "to char"
  "c F" "to char back"
  "c t" "till char"
  "c T" "till char back"
  "c ;" "find on screen"
  "c g ;" "till line"
  "c h" "prev char"
  "c j" "next line"
  "c k" "prev line"
  "c l" "next char"
  "c 0" "till start of line"
  "c $" "till end of line"
  "c {" "till start of para"
  "c }" "till end of para"
  "c (" "till start of sentence"
  "c )" "till end of sentence"
  "c e" "end of word"
  "c b" "start of word"
  "c g g" "start of buffer"
  "c G" "end of buffer"
  "c s" "sexp")

;; delete
(which-key-add-key-based-replacements
  "d u" "direct projectile"
  "d y" "cut to os clipboard"
  "d r" "rectangle"
  "d n" "doc next other"
  "d p" "doc prev other"
  "d c" "projectile dir"
  "d m" "project make"
  "d x" "doc view fit"
  "d u" "project commander"
  "d v" "query replace count"
  "d d" "line/region"
  "d i" "inside"
  "d a" "around"
  "d g" "global"
  "d i a" "all"
  "d a a" "all"
  "d i w" "word"
  "d a w" "word"
  "d i p" "para"
  "d a p" "para"
  "d i i" "indent level"
  "d a i" "indent tree"
  "d i s" "sentence"
  "d a s" "sentence"
  "d i l" "line"
  "d a l" "line"
  "d i y" "symbol"
  "d a y" "symbol"
  "d i c" "comment"
  "d a c" "comment"
  "d i f" "function"
  "d a f" "function"
  "d i q" "quote"
  "d a q" "quote"
  "d i b" "block/pairs"
  "d a b" "block/pairs"
  "d i o" "org code"
  "d a o" "org code"
  "d i u" "org subtree"
  "d a u" "org subtree"
  "d i e" "latex env"
  "d a e" "latex env"
  "d i r" "method call"
  "d a r" "method call"
  "d i d" "ruby block"
  "d a d" "ruby block"
  "d i g" "python string"
  "d a g" "python string"
  "d i m" "python block"
  "d a m" "python block"
  "d i n" "python statement"
  "d a n" "python block and dec"
  "d i $" "latex math"
  "d a $" "latex math"
  "d i h" "diff hunk"
  "d a h" "diff hunk"
  "d i x" "latex section"
  "d a x" "latex section"
  "d f" "to char"
  "d F" "to char back"
  "d t" "till char"
  "d T" "till char back"
  "d ;" "find on screen"
  "d g ;" "till line"
  "d h" "prev char"
  "d j" "next line"
  "d k" "prev line"
  "d l" "next char"
  "d 0" "till start of line"
  "d $" "till end of line"
  "d {" "till start of para"
  "d }" "till end of para"
  "d (" "till start of sentence"
  "d )" "till end of sentence"
  "d e" "end of word"
  "d b" "start of word"
  "d g g" "start of buffer"
  "d G" "end of buffer"
  "d s" "sexp")

;; yank
(which-key-add-key-based-replacements
  "y r" "rectangle"
  "y p" "paste from os clipboard"
  "y n" "occur at point"
  "y u" "bookmark jump"
  "y d" "bookmark delete"
  "y c" "bookmark create"
  "y x" "mark all symbols like this"
  "y m" "go project"
  "y v" "open init file"
  "y y" "line/region"
  "y i" "inside"
  "y a" "around"
  "y g" "global"
  "y i a" "all"
  "y a a" "all"
  "y i w" "word"
  "y a w" "word"
  "y i p" "para"
  "y a p" "para"
  "y i i" "indent level"
  "y a i" "indent tree"
  "y i s" "sentence"
  "y a s" "sentence"
  "y i l" "line"
  "y a l" "line"
  "y i y" "symbol"
  "y a y" "symbol"
  "y i c" "comment"
  "y a c" "comment"
  "y i f" "function"
  "y a f" "function"
  "y i q" "quote"
  "y a q" "quote"
  "y i b" "block/pairs"
  "y a b" "block/pairs"
  "y i o" "org code"
  "y a o" "org code"
  "y i u" "org subtree"
  "y a u" "org subtree"
  "y i e" "latex env"
  "y a e" "latex env"
  "y i r" "method call"
  "y a r" "method call"
  "y i d" "ruby block"
  "y a d" "ruby block"
  "y i g" "python string"
  "y a g" "python string"
  "y i m" "python block"
  "y a m" "python block"
  "y i n" "python statement"
  "y a n" "python block and dec"
  "y i $" "latex math"
  "y a $" "latex math"
  "y i h" "diff hunk"
  "y a h" "diff hunk"
  "y i x" "latex section"
  "y a x" "latex section"
  "y f" "to char"
  "y F" "to char back"
  "y t" "till char"
  "y T" "till char back"
  "y ;" "find on screen"
  "y g ;" "till line"
  "y h" "prev char"
  "y j" "next line"
  "y k" "prev line"
  "y l" "next char"
  "y 0" "till start of line"
  "y $" "till end of line"
  "y {" "till start of para"
  "y }" "till end of para"
  "y (" "till start of sentence"
  "y )" "till end of sentence"
  "y e" "end of word"
  "y b" "start of word"
  "y g g" "start of buffer"
  "y G" "end of buffer"
  "y s" "sexp")

;; narrow
(which-key-add-key-based-replacements
  "g n n" "region"
  "g n i" "inside"
  "g n a" "around"
  "g n g" "global"
  "g n i a" "all"
  "g n a a" "all"
  "g n i w" "word"
  "g n a w" "word"
  "g n i p" "para"
  "g n a p" "para"
  "g n i i" "indent level"
  "g n a i" "indent tree"
  "g n i s" "sentence"
  "g n a s" "sentence"
  "g n i l" "line"
  "g n a l" "line"
  "g n i y" "symbol"
  "g n a y" "symbol"
  "g n i c" "comment"
  "g n a c" "comment"
  "g n i f" "function"
  "g n a f" "function"
  "g n i q" "quote"
  "g n a q" "quote"
  "g n i h" "diff hunk"
  "g n a h" "diff hunk"
  "g n i x" "latex section"
  "g n a x" "latex section"
  "g n i b" "block/pairs"
  "g n a b" "block/pairs"
  "g n i o" "org code"
  "g n a o" "org code"
  "g n i u" "org subtree"
  "g n a u" "org subtree"
  "g n i e" "latex env"
  "g n a e" "latex env"
  "g n i r" "method call"
  "g n a r" "method call"
  "g n i d" "ruby block"
  "g n a d" "ruby block"
  "g n i g" "python string"
  "g n a g" "python string"
  "g n i m" "python block"
  "g n a m" "python block"
  "g n i n" "python statement"
  "g n a n" "python block and dec"
  "g n i $" "latex math"
  "g n a $" "latex math"
  "g n f" "to char"
  "g n F" "to char back"
  "g n t" "till char"
  "g n T" "till char back"
  "g n ;" "find on screen"
  "g n g ;" "till line"
  "g n h" "prev char"
  "g n j" "next line"
  "g n k" "prev line"
  "g n l" "next char"
  "g n 0" "till start of line"
  "g n $" "till end of line"
  "g n {" "till start of para"
  "g n }" "till end of para"
  "g n (" "till start of sentence"
  "g n )" "till end of sentence"
  "g n e" "end of word"
  "g n b" "start of word"
  "g n g g" "start of buffer"
  "g n G" "end of buffer"
  "g n s" "sexp")

;; narrow and iedit
(which-key-add-key-based-replacements
  "v x r" "iedit rectangle"
  "v x d" "delete occurrences"
  "v x n" "number occurrences"
  "v x p" "blank occurrences"
  "v x u" "upcase occurrences"
  "v x o" "downcase occurrences"
  "v x y" "replace occurrences"
  "v x p" "blank occurrences"
  "v x x" "iedit toggle"
  "v x i" "inside"
  "v x a" "around"
  "v x g" "global"
  "v x i a" "all"
  "v x a a" "all"
  "v x i w" "word"
  "v x a w" "word"
  "v x i p" "para"
  "v x a p" "para"
  "v x i i" "indent level"
  "v x a i" "indent tree"
  "v x i s" "sentence"
  "v x a s" "sentence"
  "v x i l" "line"
  "v x a l" "line"
  "v x i y" "symbol"
  "v x a y" "symbol"
  "v x i c" "comment"
  "v x a c" "comment"
  "v x i f" "function"
  "v x a f" "function"
  "v x i q" "quote"
  "v x a q" "quote"
  "v x i h" "diff hunk"
  "v x a h" "diff hunk"
  "v x i x" "latex section"
  "v x a x" "latex section"
  "v x i b" "block/pairs"
  "v x a b" "block/pairs"
  "v x i o" "org code"
  "v x a o" "org code"
  "v x i u" "org subtree"
  "v x a u" "org subtree"
  "v x i e" "latex env"
  "v x a e" "latex env"
  "v x i r" "method call"
  "v x a r" "method call"
  "v x i d" "ruby block"
  "v x a d" "ruby block"
  "v x i g" "python string"
  "v x a g" "python string"
  "v x i m" "python block"
  "v x a m" "python block"
  "v x i n" "python statement"
  "v x a n" "python block and dec"
  "v x i $" "latex math"
  "v x a $" "latex math"
  "v x f" "to char"
  "v x F" "to char back"
  "v x t" "till char"
  "v x T" "till char back"
  "v x ;" "find on screen"
  "v x g ;" "till line"
  "v x h" "prev char"
  "v x j" "next line"
  "v x k" "prev line"
  "v x l" "next char"
  "v x 0" "till start of line"
  "v x $" "till end of line"
  "v x {" "till start of para"
  "v x }" "till end of para"
  "v x (" "till start of sentence"
  "v x )" "till end of sentence"
  "v x e" "end of word"
  "v x b" "start of word"
  "v x g g" "start of buffer"
  "v x G" "end of buffer"
  "v x s" "sexp")

;; upcase
(which-key-add-key-based-replacements
  "g U U" "word"
  "g U i" "inside"
  "g U a" "around"
  "g U g" "global"
  "g U i a" "all"
  "g U a a" "all"
  "g U i w" "word"
  "g U a w" "word"
  "g U i p" "para"
  "g U a p" "para"
  "g U i i" "indent level"
  "g U a i" "indent tree"
  "g U i s" "sentence"
  "g U a s" "sentence"
  "g U i l" "line"
  "g U a l" "line"
  "g U i y" "symbol"
  "g U a y" "symbol"
  "g U i c" "comment"
  "g U a c" "comment"
  "g U i f" "function"
  "g U a f" "function"
  "g U i q" "quote"
  "g U a q" "quote"
  "g U i h" "diff hunk"
  "g U a h" "diff hunk"
  "g U i x" "latex section"
  "g U a x" "latex section"
  "g U i b" "block/pairs"
  "g U a b" "block/pairs"
  "g U i o" "org code"
  "g U a o" "org code"
  "g U i u" "org subtree"
  "g U a u" "org subtree"
  "g U i e" "latex env"
  "g U a e" "latex env"
  "g U i r" "method call"
  "g U a r" "method call"
  "g U i d" "ruby block"
  "g U a d" "ruby block"
  "g U i g" "python string"
  "g U a g" "python string"
  "g U i m" "python block"
  "g U a m" "python block"
  "g U i n" "python statement"
  "g U a n" "python block and dec"
  "g U i $" "latex math"
  "g U a $" "latex math"
  "g U f" "to char"
  "g U F" "to char back"
  "g U t" "till char"
  "g U T" "till char back"
  "g U ;" "find on screen"
  "g U g ;" "till line"
  "g U h" "prev char"
  "g U j" "next line"
  "g U k" "prev line"
  "g U l" "next char"
  "g U 0" "till start of line"
  "g U $" "till end of line"
  "g U {" "till start of para"
  "g U }" "till end of para"
  "g U (" "till start of sentence"
  "g U )" "till end of sentence"
  "g U e" "end of word"
  "g U b" "start of word"
  "g U g g" "start of buffer"
  "g U G" "end of buffer")

;; downcase
(which-key-add-key-based-replacements
  "g u u" "word"
  "g u i" "inside"
  "g u a" "around"
  "g u g" "global"
  "g u i a" "all"
  "g u a a" "all"
  "g u i w" "word"
  "g u a w" "word"
  "g u i p" "para"
  "g u a p" "para"
  "g u i i" "indent level"
  "g u a i" "indent tree"
  "g u i s" "sentence"
  "g u a s" "sentence"
  "g u i l" "line"
  "g u a l" "line"
  "g u i y" "symbol"
  "g u a y" "symbol"
  "g u i c" "comment"
  "g u a c" "comment"
  "g u i f" "function"
  "g u a f" "function"
  "g u i q" "quote"
  "g u a q" "quote"
  "g u i h" "diff hunk"
  "g u a h" "diff hunk"
  "g u i x" "latex section"
  "g u a x" "latex section"
  "g u i b" "block/pairs"
  "g u a b" "block/pairs"
  "g u i o" "org code"
  "g u a o" "org code"
  "g u i u" "org subtree"
  "g u a u" "org subtree"
  "g u i e" "latex env"
  "g u a e" "latex env"
  "g u i r" "method call"
  "g u a r" "method call"
  "g u i d" "ruby block"
  "g u a d" "ruby block"
  "g u i g" "python string"
  "g u a g" "python string"
  "g u i m" "python block"
  "g u a m" "python block"
  "g u i n" "python statement"
  "g u a n" "python block and dec"
  "g u i $" "latex math"
  "g u a $" "latex math"
  "g u f" "to char"
  "g u F" "to char back"
  "g u t" "till char"
  "g u T" "till char back"
  "g u ;" "find on screen"
  "g u g ;" "till line"
  "g u h" "prev char"
  "g u j" "next line"
  "g u k" "prev line"
  "g u l" "next char"
  "g u 0" "till start of line"
  "g u $" "till end of line"
  "g u {" "till start of para"
  "g u }" "till end of para"
  "g u (" "till start of sentence"
  "g u )" "till end of sentence"
  "g u e" "end of word"
  "g u b" "start of word"
  "g u g g" "start of buffer"
  "g u G" "end of buffer")

;; capitalize
(which-key-add-key-based-replacements
  "g C C" "word"
  "g C i" "inside"
  "g C a" "around"
  "g C g" "global"
  "g C i a" "all"
  "g C a a" "all"
  "g C i w" "word"
  "g C a w" "word"
  "g C i p" "para"
  "g C a p" "para"
  "g C i i" "indent level"
  "g C a i" "indent tree"
  "g C i s" "sentence"
  "g C a s" "sentence"
  "g C i l" "line"
  "g C a l" "line"
  "g C i y" "symbol"
  "g C a y" "symbol"
  "g C i c" "comment"
  "g C a c" "comment"
  "g C i f" "function"
  "g C a f" "function"
  "g C i q" "quote"
  "g C a q" "quote"
  "g C i h" "diff hunk"
  "g C a h" "diff hunk"
  "g C i x" "latex section"
  "g C a x" "latex section"
  "g C i b" "block/pairs"
  "g C a b" "block/pairs"
  "g C i o" "org code"
  "g C a o" "org code"
  "g C i u" "org subtree"
  "g C a u" "org subtree"
  "g C i e" "latex env"
  "g C a e" "latex env"
  "g C i r" "method call"
  "g C a r" "method call"
  "g C i d" "ruby block"
  "g C a d" "ruby block"
  "g C i g" "python string"
  "g C a g" "python string"
  "g C i m" "python block"
  "g C a m" "python block"
  "g C i n" "python statement"
  "g C a n" "python block and dec"
  "g C i $" "latex math"
  "g C a $" "latex math"
  "g C f" "to char"
  "g C F" "to char back"
  "g C t" "till char"
  "g C T" "till char back"
  "g C ;" "find on screen"
  "g C g ;" "till line"
  "g C h" "prev char"
  "g C j" "next line"
  "g C k" "prev line"
  "g C l" "next char"
  "g C 0" "till start of line"
  "g C $" "till end of line"
  "g C {" "till start of para"
  "g C }" "till end of para"
  "g C (" "till start of sentence"
  "g C )" "till end of sentence"
  "g C e" "end of word"
  "g C b" "start of word"
  "g C g g" "start of buffer"
  "g C G" "end of buffer")

;; comment
(which-key-add-key-based-replacements
  "g c c" "line"
  "g c i" "inside"
  "g c a" "around"
  "g c g" "global"
  "g c i a" "all"
  "g c a a" "all"
  "g c i w" "word"
  "g c a w" "word"
  "g c i p" "para"
  "g c a p" "para"
  "g c i i" "indent level"
  "g c a i" "indent tree"
  "g c i s" "sentence"
  "g c a s" "sentence"
  "g c i l" "line"
  "g c a l" "line"
  "g c i y" "symbol"
  "g c a y" "symbol"
  "g c i c" "comment"
  "g c a c" "comment"
  "g c i f" "function"
  "g c a f" "function"
  "g c i q" "quote"
  "g c a q" "quote"
  "g c i h" "diff hunk"
  "g c a h" "diff hunk"
  "g c i x" "latex section"
  "g c a x" "latex section"
  "g c i b" "block/pairs"
  "g c a b" "block/pairs"
  "g c i o" "org code"
  "g c a o" "org code"
  "g c i u" "org subtree"
  "g c a u" "org subtree"
  "g c i e" "latex env"
  "g c a e" "latex env"
  "g c i r" "method call"
  "g c a r" "method call"
  "g c i d" "ruby block"
  "g c a d" "ruby block"
  "g c i g" "python string"
  "g c a g" "python string"
  "g c i m" "python block"
  "g c a m" "python block"
  "g c i n" "python statement"
  "g c a n" "python block and dec"
  "g c i $" "latex math"
  "g c a $" "latex math"
  "g c f" "to char"
  "g c F" "to char back"
  "g c t" "till char"
  "g c T" "till char back"
  "g c ;" "find on screen"
  "g c g ;" "till line"
  "g c h" "prev char"
  "g c j" "next line"
  "g c k" "prev line"
  "g c l" "next char"
  "g c 0" "till start of line"
  "g c $" "till end of line"
  "g c {" "till start of para"
  "g c }" "till end of para"
  "g c (" "till start of sentence"
  "g c )" "till end of sentence"
  "g c e" "end of word"
  "g c b" "start of word"
  "g c g g" "start of buffer"
  "g c G" "end of buffer")

;; fill
(which-key-add-key-based-replacements
  "g q q" "region"
  "g q i" "inside"
  "g q a" "around"
  "g q g" "global"
  "g q i a" "all"
  "g q a a" "all"
  "g q i w" "word"
  "g q a w" "word"
  "g q i p" "para"
  "g q a p" "para"
  "g q i i" "indent level"
  "g q a i" "indent tree"
  "g q i s" "sentence"
  "g q a s" "sentence"
  "g q i l" "line"
  "g q a l" "line"
  "g q i y" "symbol"
  "g q a y" "symbol"
  "g q i c" "comment"
  "g q a c" "comment"
  "g q i f" "function"
  "g q a f" "function"
  "g q i q" "quote"
  "g q a q" "quote"
  "g q i h" "diff hunk"
  "g q a h" "diff hunk"
  "g q i x" "latex section"
  "g q a x" "latex section"
  "g q i b" "block/pairs"
  "g q a b" "block/pairs"
  "g q i o" "org code"
  "g q a o" "org code"
  "g q i u" "org subtree"
  "g q a u" "org subtree"
  "g q i e" "latex env"
  "g q a e" "latex env"
  "g q i r" "method call"
  "g q a r" "method call"
  "g q i d" "ruby block"
  "g q a d" "ruby block"
  "g q i g" "python string"
  "g q a g" "python string"
  "g q i m" "python block"
  "g q a m" "python block"
  "g q i n" "python statement"
  "g q a n" "python block and dec"
  "g q i $" "latex math"
  "g q a $" "latex math"
  "g q f" "to char"
  "g q F" "to char back"
  "g q t" "till char"
  "g q T" "till char back"
  "g q ;" "find on screen"
  "g q g ;" "till line"
  "g q h" "prev char"
  "g q j" "next line"
  "g q k" "prev line"
  "g q l" "next char"
  "g q 0" "till start of line"
  "g q $" "till end of line"
  "g q {" "till start of para"
  "g q }" "till end of para"
  "g q (" "till start of sentence"
  "g q )" "till end of sentence"
  "g q e" "end of word"
  "g q b" "start of word"
  "g q g g" "start of buffer"
  "g q G" "end of buffer")

;; unfill
(which-key-add-key-based-replacements
  "g Q Q" "region"
  "g Q i" "inside"
  "g Q a" "around"
  "g Q g" "global"
  "g Q i a" "all"
  "g Q a a" "all"
  "g Q i w" "word"
  "g Q a w" "word"
  "g Q i p" "para"
  "g Q a p" "para"
  "g Q i i" "indent level"
  "g Q a i" "indent tree"
  "g Q i s" "sentence"
  "g Q a s" "sentence"
  "g Q i l" "line"
  "g Q a l" "line"
  "g Q i y" "symbol"
  "g Q a y" "symbol"
  "g Q i c" "comment"
  "g Q a c" "comment"
  "g Q i f" "function"
  "g Q a f" "function"
  "g Q i q" "quote"
  "g Q a q" "quote"
  "g Q i h" "diff hunk"
  "g Q a h" "diff hunk"
  "g Q i x" "latex section"
  "g Q a x" "latex section"
  "g Q i b" "block/pairs"
  "g Q a b" "block/pairs"
  "g Q i o" "org code"
  "g Q a o" "org code"
  "g Q i u" "org subtree"
  "g Q a u" "org subtree"
  "g Q i e" "latex env"
  "g Q a e" "latex env"
  "g Q i r" "method call"
  "g Q a r" "method call"
  "g Q i d" "ruby block"
  "g Q a d" "ruby block"
  "g Q i g" "python string"
  "g Q a g" "python string"
  "g Q i m" "python block"
  "g Q a m" "python block"
  "g Q i n" "python statement"
  "g Q a n" "python block and dec"
  "g Q i $" "latex math"
  "g Q a $" "latex math"
  "g Q f" "to char"
  "g Q f" "to char back"
  "g Q t" "till char"
  "g Q t" "till char back"
  "g Q ;" "find on screen"
  "g Q g ;" "till line"
  "g Q h" "prev char"
  "g Q j" "next line"
  "g Q k" "prev line"
  "g Q l" "next char"
  "g Q 0" "till start of line"
  "g Q $" "till end of line"
  "g Q {" "till start of para"
  "g Q }" "till end of para"
  "g Q (" "till start of sentence"
  "g Q )" "till end of sentence"
  "g Q e" "end of word"
  "g Q b" "start of word"
  "g Q g g" "start of buffer"
  "g Q G" "end of buffer")

;; shell command
(which-key-add-key-based-replacements
  "! !" "line/region"
  "! i" "inside"
  "! a" "around"
  "! g" "global"
  "! i a" "all"
  "! a a" "all"
  "! i w" "word"
  "! a w" "word"
  "! i p" "para"
  "! a p" "para"
  "! i i" "indent level"
  "! a i" "indent tree"
  "! i s" "sentence"
  "! a s" "sentence"
  "! i l" "line"
  "! a l" "line"
  "! i y" "symbol"
  "! a y" "symbol"
  "! i c" "comment"
  "! a c" "comment"
  "! i f" "function"
  "! a f" "function"
  "! i q" "quote"
  "! a q" "quote"
  "! i h" "diff hunk"
  "! a h" "diff hunk"
  "! i x" "latex section"
  "! a x" "latex section"
  "! i b" "block/pairs"
  "! a b" "block/pairs"
  "! i o" "org code"
  "! a o" "org code"
  "! i u" "org subtree"
  "! a u" "org subtree"
  "! i e" "latex env"
  "! a e" "latex env"
  "! i r" "method call"
  "! a r" "method call"
  "! i d" "ruby block"
  "! a d" "ruby block"
  "! i g" "python string"
  "! a g" "python string"
  "! i m" "python block"
  "! a m" "python block"
  "! i n" "python statement"
  "! a n" "python block and dec"
  "! i $" "latex math"
  "! a $" "latex math"
  "! f" "to char"
  "! F" "to char back"
  "! t" "till char"
  "! T" "till char back"
  "! ;" "find on screen"
  "! g ;" "till line"
  "! h" "prev char"
  "! j" "next line"
  "! k" "prev line"
  "! l" "next char"
  "! 0" "till start of line"
  "! $" "till end of line"
  "! {" "till start of para"
  "! }" "till end of para"
  "! (" "till start of sentence"
  "! )" "till end of sentence"
  "! e" "end of word"
  "! b" "start of word"
  "! g g" "start of buffer"
  "! G" "end of buffer")

;; yank to clipboard
(which-key-add-key-based-replacements
  "g y y" "line/region"
  "g y i" "inside"
  "g y a" "around"
  "g y g" "global"
  "g y i a" "all"
  "g y a a" "all"
  "g y i w" "word"
  "g y a w" "word"
  "g y i p" "para"
  "g y a p" "para"
  "g y i i" "indent level"
  "g y a i" "indent tree"
  "g y i s" "sentence"
  "g y a s" "sentence"
  "g y i l" "line"
  "g y a l" "line"
  "g y i y" "symbol"
  "g y a y" "symbol"
  "g y i c" "comment"
  "g y a c" "comment"
  "g y i f" "function"
  "g y a f" "function"
  "g y i q" "quote"
  "g y a q" "quote"
  "g y i h" "diff hunk"
  "g y a h" "diff hunk"
  "g y i x" "latex section"
  "g y a x" "latex section"
  "g y i b" "block/pairs"
  "g y a b" "block/pairs"
  "g y i o" "org code"
  "g y a o" "org code"
  "g y i u" "org subtree"
  "g y a u" "org subtree"
  "g y i e" "latex env"
  "g y a e" "latex env"
  "g y i r" "method call"
  "g y a r" "method call"
  "g y i d" "ruby block"
  "g y a d" "ruby block"
  "g y i g" "python string"
  "g y a g" "python string"
  "g y i m" "python block"
  "g y a m" "python block"
  "g y i n" "python statement"
  "g y a n" "python block and dec"
  "g y i $" "latex math"
  "g y a $" "latex math"
  "g y f" "to char"
  "g y F" "to char back"
  "g y t" "till char"
  "g y T" "till char back"
  "g y ;" "find on screen"
  "g y g ;" "till line"
  "g y h" "prev char"
  "g y j" "next line"
  "g y k" "prev line"
  "g y l" "next char"
  "g y 0" "till start of line"
  "g y $" "till end of line"
  "g y {" "till start of para"
  "g y }" "till end of para"
  "g y (" "till start of sentence"
  "g y )" "till end of sentence"
  "g y e" "end of word"
  "g y b" "start of word"
  "g y g g" "start of buffer"
  "g y G" "end of buffer")

;; replace region
(which-key-add-key-based-replacements
  "g r r" "line/region"
  "g r i" "inside"
  "g r a" "around"
  "g r g" "global"
  "g r i a" "all"
  "g r a a" "all"
  "g r i w" "word"
  "g r a w" "word"
  "g r i p" "para"
  "g r a p" "para"
  "g r i i" "indent level"
  "g r a i" "indent tree"
  "g r i s" "sentence"
  "g r a s" "sentence"
  "g r i l" "line"
  "g r a l" "line"
  "g r i y" "symbol"
  "g r a y" "symbol"
  "g r i c" "comment"
  "g r a c" "comment"
  "g r i f" "function"
  "g r a f" "function"
  "g r i q" "quote"
  "g r a q" "quote"
  "g r i h" "diff hunk"
  "g r a h" "diff hunk"
  "g r i x" "latex section"
  "g r a x" "latex section"
  "g r i b" "block/pairs"
  "g r a b" "block/pairs"
  "g r i o" "org code"
  "g r a o" "org code"
  "g r i u" "org subtree"
  "g r a u" "org subtree"
  "g r i e" "latex env"
  "g r a e" "latex env"
  "g r i r" "method call"
  "g r a r" "method call"
  "g r i d" "ruby block"
  "g r a d" "ruby block"
  "g r i g" "python string"
  "g r a g" "python string"
  "g r i m" "python block"
  "g r a m" "python block"
  "g r i n" "python statement"
  "g r a n" "python block and dec"
  "g r i $" "latex math"
  "g r a $" "latex math"
  "g r f" "to char"
  "g r f" "to char back"
  "g r t" "till char"
  "g r t" "till char back"
  "g r ;" "find on screen"
  "g r g ;" "till line"
  "g r h" "prev char"
  "g r j" "next line"
  "g r k" "prev line"
  "g r l" "next char"
  "g r 0" "till start of line"
  "g r $" "till end of line"
  "g r {" "till start of para"
  "g r }" "till end of para"
  "g r (" "till start of sentence"
  "g r )" "till end of sentence"
  "g r e" "end of word"
  "g r b" "start of word"
  "g r g g" "start of buffer"
  "g r G" "end of buffer")

;; replace from clipboard
(which-key-add-key-based-replacements
  "g r c" "from clipboard"
  "g r c c" "line/region"
  "g r c i" "inside"
  "g r c a" "around"
  "g r c g" "global"
  "g r c i a" "all"
  "g r c a a" "all"
  "g r c i w" "word"
  "g r c a w" "word"
  "g r c i p" "para"
  "g r c a p" "para"
  "g r c i i" "indent level"
  "g r c a i" "indent tree"
  "g r c i s" "sentence"
  "g r c a s" "sentence"
  "g r c i l" "line"
  "g r c a l" "line"
  "g r c i y" "symbol"
  "g r c a y" "symbol"
  "g r c i c" "comment"
  "g r c a c" "comment"
  "g r c i f" "function"
  "g r c a f" "function"
  "g r c i q" "quote"
  "g r c a q" "quote"
  "g r c i h" "diff hunk"
  "g r c a h" "diff hunk"
  "g r c i x" "latex section"
  "g r c a x" "latex section"
  "g r c i b" "block/pairs"
  "g r c a b" "block/pairs"
  "g r c i o" "org code"
  "g r c a o" "org code"
  "g r c i u" "org subtree"
  "g r c a u" "org subtree"
  "g r c i e" "latex env"
  "g r c a e" "latex env"
  "g r c i r" "method call"
  "g r c a r" "method call"
  "g r c i d" "ruby block"
  "g r c a d" "ruby block"
  "g r c i g" "python string"
  "g r c a g" "python string"
  "g r c i m" "python block"
  "g r c a m" "python block"
  "g r c i n" "python statement"
  "g r c a n" "python block and dec"
  "g r c i $" "latex math"
  "g r c a $" "latex math"
  "g r c f" "to char"
  "g r c F" "to char back"
  "g r c t" "till char"
  "g r c T" "till char back"
  "g r c ;" "find on screen"
  "g r c g ;" "till line"
  "g r c h" "prev char"
  "g r c j" "next line"
  "g r c k" "prev line"
  "g r c l" "next char"
  "g r c 0" "till start of line"
  "g r c $" "till end of line"
  "g r c {" "till start of para"
  "g r c }" "till end of para"
  "g r c (" "till start of sentence"
  "g r c )" "till end of sentence"
  "g r c e" "end of word"
  "g r c b" "start of word"
  "g r c g g" "start of buffer"
  "g r c G" "end of buffer")

;; multiple cursors with regexp
(which-key-add-key-based-replacements
  "v x" "multiple cursors"
  "v x x" "region regexp"
  "v x v" "expand region regexp"
  "v x i" "inside"
  "v x a" "around"
  "v x g" "global"
  "v x i a" "all"
  "v x a a" "all"
  "v x i w" "word"
  "v x a w" "word"
  "v x i p" "para"
  "v x a p" "para"
  "v x i i" "indent level"
  "v x a i" "indent tree"
  "v x i s" "sentence"
  "v x a s" "sentence"
  "v x i l" "line"
  "v x a l" "line"
  "v x i y" "symbol"
  "v x a y" "symbol"
  "v x i c" "comment"
  "v x a c" "comment"
  "v x i f" "function"
  "v x a f" "function"
  "v x i q" "quote"
  "v x a q" "quote"
  "v x i b" "block/pairs"
  "v x a b" "block/pairs"
  "v x i o" "org code"
  "v x a o" "org code"
  "v x i u" "org subtree"
  "v x a u" "org subtree"
  "v x i e" "latex env"
  "v x a e" "latex env"
  "v x i r" "method call"
  "v x a r" "method call"
  "v x i d" "ruby block"
  "v x a d" "ruby block"
  "v x i g" "python string"
  "v x a g" "python string"
  "v x i m" "python block"
  "v x a m" "python block"
  "v x i n" "python statement"
  "v x a n" "python block and dec"
  "v x i h" "diff hunk"
  "v x a h" "diff hunk"
  "v x i x" "latex section"
  "v x a x" "latex section"
  "v x i $" "latex math"
  "v x a $" "latex math"
  "v x f" "to char"
  "v x F" "to char back"
  "v x t" "till char"
  "v x T" "till char back"
  "v x ;" "find on screen"
  "v x g ;" "till line"
  "v x h" "prev char"
  "v x j" "next line"
  "v x k" "prev line"
  "v x l" "next char"
  "v x 0" "till start of line"
  "v x $" "till end of line"
  "v x {" "till start of para"
  "v x }" "till end of para"
  "v x (" "till start of sentence"
  "v x )" "till end of sentence"
  "v x e" "end of word"
  "v x b" "start of word"
  "v x g g" "start of buffer"
  "v x G" "end of buffer")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;    global bindings     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; alphabets
(which-key-add-key-based-replacements
  ;; lower case
  "g a" "org agenda"
  "g b" "git blame"
  "g c" "comment"
  "g d" "indent tools"
  "g e" "extract word"
  "g f" "find at point"
  "g g" "start of buffer"
  "g h" "goto hunk"
  "g i" "coerce"
  "g j" "next hunk"
  "g k" "prev hunk"
  "g l" "align"
  "g m" "marks"
  "g n" "narrow"
  "g o" "org capture"
  "g p" "ipython notebook"
  "g q" "fill"
  "g r" "replace"
  "g s" "directory search"
  "g t" "new config"
  "g u" "downcase"
  "g v" "select last region"
  "g w" "widen"
  "g x" "grep edit save"
  "g y" "yank to clipboard"
  "g z" "spell correct"
  ;; uppercase
  "g A" "describe char"
  "g B" "current bib"
  "g C" "capitalize"
  "g D" "dash doc"
  "g E" "writeable grep"
  "g F" "follow mode"
  "g G" "git log"
  "g H" "revert hunk"
  ;; "g I" "number lines"
  "g J" "join line"
  "g K" "delete file"
  "g L" "timemachine switch"
  "g M" "manage packages"
  "g N" "rename file"
  "g O" "open package list"
  "g P" "post gist"
  "g Q" "unfill"
  "g R" "git remote"
  "g S" "split line"
  "g T" "close config"
  "g U" "upcase"
  "g V" "view browser"
  "g W" "wdired mode"
  "g X" "grep edit abort"
  "g Y" "yank filename"
  "g Z" "tmux zoom")

;; numbers and symbols
(which-key-add-key-based-replacements
  ;; numbers
  "g 1" "config 1"
  "g 2" "config 2"
  "g 3" "config 3"
  "g 4" "config 4"
  "g 5" "config 5"
  "g 6" "config 6"
  "g 7" "config 7"
  "g 8" "config 8"
  "g 9" "config 9"
  "g 0" "config 0"
  ;; symbols
  "g ~" "macro bind to key"
  "g RET" "jump to error"
  "g TAB" "push to mobile org"
  "g DEL" "pull from mobile org"
  "g SPC" "C-c C-c"
  "g !" "shell"
  "g @" "name macro"
  "g #" "helm top"
  "g $" "call terminal"
  "g %" "man page"
  "g ^" "number lines"
  "g &" "project eshell"
  "g *" "emacs colors"
  "g (" "gtags create"
  "g )" "gtags update"
  "g _" "rename config"
  "g {" "cursor unmark prev"
  "g }" "cursor unmark next"
  "g [" "pop from tag"
  "g ]" "find ref"
  "g \\" "pop shell"
  "g |" "zoom out"
  "g :" "restrict to line"
  "g ;" "goto file in project"
  "g '" "cursor previous"
  "g \"" "last cursor change"
  "g ," "restrict to function"
  "g <" "last change"
  "g >" "next change"
  "g /" "search google"
  "g ?" "display cursor"
  "g =" "goto closest number"
  "g +" "add number"
  "g -" "subtract number"
  "g ." "duplicate line/region"
  "g `" "edit macro")

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;    user bindings     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; some major mode bindings
(which-key-add-key-based-replacements
  "m g" "debug icon"
  "m g SPC" "set"
  "m g DEL" "remove"
  "m :" "eval expression"
  "m SPC" "org store link"
  "m \\" "mlint"
  "m >" "org edit special"
  "m <" "org abort edit"
  "m =" "org save edit"
  "m ," "compile"
  "m ." "dumb jump"
  "m /" "project make")

;; comint mode bindings
(which-key-add-key-based-replacements
  "m !" "comint"
  "m ! q" "quit"
  "m ! a" "bol or process mark"
  "m ! b" "backward word"
  "m ! c" "interrupt"
  "m ! d" "send eof"
  "m ! e" "max output"
  "m ! f" "forward word"
  "m ! l" "input ring"
  "m ! n" "next"
  "m ! o" "delete prompt"
  "m ! p" "previous"
  "m ! r" "show output"
  "m ! s" "write output"
  "m ! u" "kill input"
  "m ! x" "history"
  "m ! z" "stop")

;; leader key
(which-key-add-key-based-replacements
  ;; alphabets
  "SPC" "user prefix"
  "SPC a" "diary"
  "SPC b" "bibtex"
  "SPC c" "git timemachine"
  "SPC d" "project files"
  "SPC e" "git status"
  "SPC f" "find file"
  "SPC g" "quit"
  "SPC h" "help"
  "SPC i" "ivy resume"
  "SPC j" "execute command"
  "SPC k" "switch buffers"
  "SPC l" "list errors"
  "SPC m" "wiki"
  "SPC n" "file tree"
  "SPC o" "search org files"
  "SPC p" "search project files"
  "SPC q" "helm-avy/ivy-avy"
  "SPC r" "recent files"
  "SPC s" "system search/locate"
  "SPC t" "find symbol"
  "SPC u" "trello"
  "SPC v" "remove mark"
  "SPC w" "save buffer"
  "SPC x" "info lookup"
  "SPC y" "yank history"
  ;; symbols
  "SPC ." "select theme"
  "SPC ," "describe bindings"
  "SPC /" "search all buffers"
  "SPC \\" "emacs processes"
  "SPC TAB" "other file"
  "SPC DEL" "test file"
  "SPC SPC" "escape chord")

;; background prefix
(which-key-add-key-based-replacements
  "SPC z" "background"
  "SPC z p" "processes"
  "SPC z h" "hexo"
  "SPC z w" "watchandcode"
  "SPC z d" "docker")

;; window prefix
(which-key-add-key-based-replacements
  "w e" "ace window"
  "w h" "left"
  "w j" "down"
  "w k" "up"
  "w l" "right"
  "w [" "shrink vertically"
  "w ]" "shrink vertically"
  "w {" "shrink horizontally"
  "w }" "shrink horizontally"
  "w =" "balance windows"
  "w a" "alternate buffer"
  "w i" "interleave note"
  "w n" "interleave next"
  "w p" "interleave previous"
  "w q" "quit"
  "w o" "only window"
  "w v" "split vertically"
  "w s" "split horizontally"
  "w x" "exchange"
  "w f" "find file at point"
  "w w" "other")

;; polymode prefix
(which-key-add-key-based-replacements
  "`" "polymode prefix"
  "` e" "export"
  "` E" "select export"
  "` w" "weave"
  "` W" "select weaver"
  "` t" "tangle"
  "` T" "select tangler"
  "` h" "previous same"
  "` j" "next"
  "` k" "previous"
  "` l" "next same"
  "` o" "show process"
  "` d" "delete"
  "` n" "toggle narrowing"
  "` v" "mark"
  "` i" "insert")

;; alignment
(which-key-add-key-based-replacements
  "g l l" "regexp"
  "g l :" "colon"
  "g l ;" "semicolon"
  "g l SPC" "whitespace"
  "g l =" "equals"
  "g l q" "quote"
  "g l ," "comma"
  "g l ." "dot"
  "g l %" "percent"
  "g l #" "hash"
  "g l &" "ampersand")

;; exchanging
(which-key-add-key-based-replacements
  "c z" "exchange"
  "d z" "blank"
  "c z l" "next word"
  "c z h" "prev word"
  "c z j" "next line"
  "c z k" "prev line"
  "d z k" "blank up"
  "d z j" "blank down")

;; macro editing
(which-key-add-key-based-replacements
  "c q" "edit macro"
  "v q" "apply macro to lines"
  "d q" "prev macro"
  "y q" "next macro")

;; toggling options
(which-key-add-key-based-replacements
  "c o" "change option"
  "c o a" "anaconda"
  "c o b" "battery"
  "c o c" "autocompletion"
  "c o d" "diminish"
  "c o e" "debug on error"
  "c o f" "flyspell"
  "c o g" "org babel load"
  "c o h" "highlight/focus"
  "c o i" "indent guide"
  "c o j" "jedi py"
  "c o k" "cursor blink mode"
  "c o l" "double caps mode"
  "c o m" "margin"
  "c o n" "line number"
  "c o o" "org struct mode"
  "c o p" "smartparens"
  "c o q" "irony"
  "c o r" "scrollbar"
  "c o s" "strict mode"
  "c o t" "time"
  "c o u" "menu bar"
  "c o v" "visual wrap"
  "c o w" "subword"
  "c o y" "yasnippets"
  "c o z" "anzu")

;; desktop mode
(which-key-add-key-based-replacements
  "d o" "desktop option"
  "d o s" "save"
  "d o r" "read"
  "d o n" "new"
  "d o d" "delete"
  "d o o" "open"
  "d o j" "jump"
  "d o m" "mode"
  "d o i" "in dir"
  "d o c" "clear"
  "d o v" "revert")

;; yasnippets
(which-key-add-key-based-replacements
  "y o" "yasnippets option"
  "y o a" "abort"
  "y o r" "reload"
  "y o t" "tryout"
  "y o j" "jump"
  "y o m" "minor"
  "y o b" "buffer load"
  "y o c" "buffer load and close"
  "y o n" "new snippet")

;; anzu replace
(which-key-add-key-based-replacements
  "SPC q r" "replace regexp"
  "SPC q w" "replace at cursor"
  "SPC q e" "replace"
  "SPC q q" "replace thing at point")

;; visual options
(which-key-add-key-based-replacements
  "v o" "visual options"
  "v o c" "courier font"
  "v o g" "georgia font"
  "v o h" "hack font"
  "v o f" "monaco font"
  "v o o" "consolas font"
  "v o d" "deja vu font"
  "v o t" "tiny type"
  "v o i" "miniscule type"
  "v o s" "small type"
  "v o m" "medium type"
  "v o l" "large type"
  "v o x" "select font")

;; semantic
(which-key-add-key-based-replacements
  "," "semantic"
  ", c" "calculate scope"
  ", g" "debug"
  ", h" "describe tag"
  ", w" "describe class"
  ", b" "describe buffer"
  ", d" "documentation"
  ", j" "jump"
  ", r" "symbol ref"
  ", s" "ref search"
  ", t" "speedbar"
  ", v" "variants"
  ", m" "summary"
  ", n" "next tag"
  ", p" "prev tag"
  ", y" "copy tag"
  ", u" "up to ref"
  ", z" "analyze tag"
  ", x" "analyze context")

;; provide this key replacements
(provide 'sk-ryo-which-key)
