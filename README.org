#+TITLE: Emacs Configuration

This is my new Emacs configuration which is work in progress. It is hardly complete with partial support added for only Org, Markdown, LaTeX, MATLAB and Python. However, I am doing this as an experiment to see if I can emulate Vim bindings without using [[https://www.emacswiki.org/emacs/Evil][Evil mode]].

* Why not Evil?

Evil mode is great and it works wonderfully. However, there are certain corner cases - for example, you cannot bind anything to ~co~ like in Vim due to the way it works. There is a nice workaround with [[https://github.com/noctuid/general.el][general.el]]. Also, the more I used Vim bindings, the more I find that I don't use most of it. I would rather have a modal configuration with bindings that I frequently use in the positions I want. Anyway, even if this doesn't work out, I always have Evil to fall back to.

* How does this work?

I use the [[https://github.com/Kungsgeten/ryo-modal][ryo-modal]] package to setup a modal configuration and my configuration emulates Vim bindings. The most important change, however, is that I don't create any programmatic alternative to evil. I just create easy-to-use bindings and bind them to the sequence of characters. For example, ~d~ does not trigger a function; ~diw~ emulates Vim's delete-in-word using [[https://github.com/magnars/expand-region.el][expand-region]] and the default ~kill-region~. This is a common pattern throughout my configuration.

* Core ideas

I rely heavily on other packages to achieve this configuration. The idea is to rely on the neat ability to bind a key to a chain of commands in ~ryo-modal-mode~ and combine it with the wealth of commands available in ~expand-region~ to achieve the effect of an operator and text-object. Secondly, I always forget my bindings and [[https://github.com/justbur/emacs-which-key][which-key]] is a god-send. Finally, I want to establish a clear, consistent scheme for key bindings - ~m~ for major mode bindings, ~SPC m~ for all major mode bindings, etc. With these ideas and a quite a few third-party packages, I think I'm about 90% there to achieve this.

I will update this README as I make progress.
